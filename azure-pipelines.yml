trigger:
  branches:
    include:
      - '*'
    exclude:
      - 'no-ci-*'
      - 'skip-ci-*'

variables:
  CMAKE_BUILD_ARGS: ""
  CMAKE_GENERATE_ARGS: ""
  URHO3D_CSHARP: ON
  URHO3D_SAMPLES: ON
  URHO3D_PACKAGING: ON
  TRACY_NO_INVARIANT_CHECK: 1

jobs:
  - job: Web
    pool:
      vmImage: 'ubuntu-18.04'

    variables:
      URHO3D_CSHARP: OFF
      BUILD_SHARED_LIBS: OFF
      CMAKE_GENERATE_ARGS: -DCMAKE_TOOLCHAIN_FILE=CMake/Toolchains/Emscripten.cmake
      EMSCRIPTEN_ROOT_PATH: $(Build.SourcesDirectory)/emsdk-master/upstream/emscripten

    steps:
      - template: .ci/cmake.yml
      - bash: |
          # Default compiler on this build worker image does not support c++17.
          sudo apt-get install -y --no-install-recommends uuid-dev gcc-8 g++-8
          sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-8 100
          sudo update-alternatives --set cc /usr/bin/gcc-8
          sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-8 100
          sudo update-alternatives --set c++ /usr/bin/g++-8
          # Emscripten
          wget -q https://github.com/emscripten-core/emsdk/archive/master.tar.gz
          tar -xvf master.tar.gz
          emsdk-master/emsdk install latest
          emsdk-master/emsdk activate latest
        displayName: 'Setup'
      - template: .ci/build.yml

  - job: Windows
    pool:
      vmImage: 'windows-2019'

    strategy:
      matrix:
        static-msvc-d3d11:
          BUILD_SHARED_LIBS: OFF
        shared-msvc-d3d11:
          BUILD_SHARED_LIBS: ON
        static-mingw-d3d9:
          BUILD_SHARED_LIBS: OFF
          CMAKE_GENERATE_ARGS: -G Ninja -DURHO3D_GRAPHICS_API=D3D9
        shared-mingw-d3d9:
          BUILD_SHARED_LIBS: ON
          CMAKE_GENERATE_ARGS: -G Ninja -DURHO3D_GRAPHICS_API=D3D9
          URHO3D_CSHARP: OFF

    steps:
      - script: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          echo '##vso[task.setvariable variable=PATH]%PATH%;%VSINSTALLDIR%\MSBuild\%VisualStudioVersion%;%WindowsSDK_ExecutablePath_x64%'
        displayName: 'Setup'
      - template: .ci/build.yml

  - job: Linux
    pool:
      vmImage: 'ubuntu-18.04'

    variables:
      CMAKE_GENERATE_ARGS: -G Ninja

    strategy:
      matrix:
        static-gcc-opengl:
          CC: gcc-8
          CXX: g++-8
          BUILD_SHARED_LIBS: OFF
          EXTRA_PACKAGES: gcc-8 g++-8
        shared-gcc-opengl:
          CC: gcc-8
          CXX: g++-8
          BUILD_SHARED_LIBS: ON
          EXTRA_PACKAGES: gcc-8 g++-8 mono-devel msbuild-libhostfxr msbuild-sdkresolver msbuild
        static-clang-opengl:
          BUILD_SHARED_LIBS: OFF
          CC: clang-8
          CXX: clang++-8
          EXTRA_PACKAGES: clang-8
        shared-clang-opengl:
          BUILD_SHARED_LIBS: ON
          CC: clang-8
          CXX: clang++-8
          EXTRA_PACKAGES: clang-8 mono-devel msbuild-libhostfxr msbuild-sdkresolver msbuild

    steps:
      - bash: |
          # Mono
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
          echo "deb http://download.mono-project.com/repo/ubuntu stable-bionic main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
          # Clang
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-add-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main"
        displayName: 'Add Repositories'
      - template: .ci/cmake.yml
      - bash: |
          sudo apt-get install -y --no-install-recommends libasound2-dev libxrandr-dev libgl1-mesa-dev libglu1-mesa-dev uuid-dev ninja-build $(EXTRA_PACKAGES)
          sudo update-alternatives --install /usr/bin/cc cc /usr/bin/$(CC) 100
          sudo update-alternatives --set cc /usr/bin/$(CC)
          sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/$(CXX) 100
          sudo update-alternatives --set c++ /usr/bin/$(CXX)
          mkdir "$(Build.SourcesDirectory)/SDK"
        displayName: 'Setup'

      - template: .ci/build.yml

  - job: MacOS
    pool:
      vmImage: 'macOS-10.13'

    strategy:
      matrix:
        static-clang-opengl:
          BUILD_SHARED_LIBS: OFF
        shared-clang-opengl:
          BUILD_SHARED_LIBS: ON

    steps:
      - bash: |
          brew install pkg-config
          wget -q https://download.mono-project.com/archive/5.10.1/macos-10-universal/MonoFramework-MDK-5.10.1.57.macos10.xamarin.universal.pkg -O /tmp/Mono.pkg
          sudo installer -pkg /tmp/Mono.pkg -target /
        displayName: 'Setup'

      - template: .ci/build.yml

  - job: iOS
    pool:
      vmImage: 'macOS-10.13'

    variables:
      BUILD_SHARED_LIBS: OFF
      URHO3D_CSHARP: OFF
      CMAKE_GENERATE_ARGS: -G Xcode -DCMAKE_TOOLCHAIN_FILE=CMake/Toolchains/IOS.cmake -DPLATFORM=SIMULATOR64

    steps:
      - template: .ci/build.yml

  - job: Android
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
      - template: .ci/cmake.yml
      - bash: |
          # Setup
          cd $(Build.SourcesDirectory)/android
          gradle wrapper

      - task: Gradle@2
        inputs:
          workingDirectory: android
          gradleWrapperFile: android/gradlew
          gradleOptions: -Xmx3072m
          publishJUnitResults: false
          tasks: assembleRelease

      - task: CopyFiles@2
        inputs:
          contents: '**/*.apk'
          targetFolder: $(build.artifactStagingDirectory)

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: $(build.artifactStagingDirectory)
          artifactName: rbfx-APK-$(Agent.JobName)-$(Build.SourceVersion)
          artifactType: container
